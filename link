#!/usr/bin/env python3

"""
A simple script to get links for branches, commits, or PRs
"""

import os
import re
import pathlib
import argparse

import git
import yaml
from github import Github

from rich.console import Console
from rich import print

console = Console(highlight=False)

GITHUB_PROJECT_PAT = re.compile(r"git@github.com:((.*)/.*)\.git$")

GITHUB_BASE_URL = "https://github.com"

try:
    # Get from environ if possible (in case we want to override)
    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
except KeyError:
    # Otherwise, get it from `gh` command configuration
    yaml_file = pathlib.Path("~/.config/gh/hosts.yml").expanduser().open(encoding="utf8")
    yaml_doc = yaml.safe_load(yaml_file)
    GITHUB_TOKEN = yaml_doc["github.com"]["oauth_token"]

repo = git.Repo(search_parent_directories=True)
gh = Github(GITHUB_TOKEN)


def get_commit_remote_url(commit_or_ref=None):
    """
    Get the remote URL for a given commit (or the current one)
    """
    if commit_or_ref:
        commit_obj = repo.rev_parse(commit_or_ref)
    else:
        commit_obj = repo.active_branch.commit
    commit_hex = commit_obj.hexsha

    remote = repo.remotes[0]
    remote_url = next(remote.urls)

    project_name = GITHUB_PROJECT_PAT.match(remote_url).group(1)

    github_url = f"{GITHUB_BASE_URL}/{project_name}/commit/{commit_hex}"
    print(github_url)


def get_pr_remote_url(branch_name=None):
    """
    Get the remote URL for PRs using the specified (or current)
    branch as a HEAD
    """
    if branch_name is None:
        local_branch = repo.active_branch
    else:
        local_branch = repo.branches[branch_name]

    remote_name = local_branch.tracking_branch().remote_name

    remote = repo.remote(remote_name)
    remote_url = next(remote.urls)

    project_name, github_username = GITHUB_PROJECT_PAT.match(remote_url).groups()

    if args.closed:
        state = "all"
    else:
        state = "open"
    gh_project = gh.get_repo(project_name)
    prs = gh_project.get_pulls(head=f"{github_username}:{local_branch.name}", state=state)

    prs = list(prs)

    if not prs:
        console.print(f"No PRs found for {github_username}:{local_branch.name}")
    else:
        for pull_request in prs:
            if pull_request.state == 'closed':
                closed = '[red] (closed)[/red]'
                state_icon = "[purple]\uf407[/purple]"
            else:
                closed = ''
                state_icon = "[green]\uf407[/green]"
            console.print(f"{state_icon} {pull_request.title}{closed}: [link={pull_request.html_url}]{pull_request.html_url}[/link]")


def get_branch_remote_url(branch_name=None):
    """
    Get the remote URL for the specified (or current) branch
    """
    if branch_name is None:
        local_branch = repo.active_branch
    else:
        local_branch = repo.branches[branch_name]

    remote_head = local_branch.tracking_branch().remote_head
    remote_name = local_branch.tracking_branch().remote_name

    remote = repo.remote(remote_name)
    remote_url = next(remote.urls)

    project_name = GITHUB_PROJECT_PAT.match(remote_url).group(1)

    github_url = f"{GITHUB_BASE_URL}/{project_name}/tree/{remote_head}"
    console.print(f"[link={github_url}]{github_url}[/link]")


parser = argparse.ArgumentParser()

parser.add_argument("command", help="What to run")
parser.add_argument("--closed", action="store_true", help="Also look for closed PRs")
parser.add_argument("parameter", nargs="*", help="The targets to search for links to (default: current branch)")

args = parser.parse_args()

match args.command:
    case "branch":
        if args.parameter:
            for param in args.parameter:
                get_branch_remote_url(param)
        else:
            get_branch_remote_url()
    case "pr":
        if args.parameter:
            for param in args.parameter:
                get_pr_remote_url(param)
        else:
            get_pr_remote_url()
    case "commit":
        if args.parameter:
            for param in args.parameter:
                get_commit_remote_url(param)
        else:
            get_commit_remote_url()
    case _:
        print(f"Unrecognized command: {args.command}")
